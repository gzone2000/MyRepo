Elasticsearch Data Process 


ㅇ 실습 환경
   # VirtualBox VM 
   - 1 CPU , 2048M Mem
   - IP : 192.168.63.101 (Host-Only)
   - IP : 10.0.2.15 (NAT)
   # Elasticsearch-6.7.2  and Kibana-6.7.2 기동 완료

ㅇ kibana 접속 http://192.168.63.101:5601 > DevTools > Console에서 실습



1. index 생성

	PUT /twitter


2. index 확인

	GET /twitter
	
	Kibana > Monitoring > indices > twitter 생성 확인 및 클릭 > Shard Legend 확인 : 5개 shard가 ELK01 node 다 있음

	cd elasticsearch-6.7.2/data/nodes/0/indices
	ls -lrt > 가장 맨 마지막 디렉토리 확인
	cd KFf4ljy8TIi9rmSpXUkM9A
	ls -l > 5개의 shard 보임
	cd _state
	cat state-3.st
	

3. document 생성

	PUT /twitter/_doc/1
	{
	  "user" : "kimchy",
	  "post_date" : "2019-05-26T19:39:00",
	  "message" : "trying out Elasticsearch"
	}

	GET /twitter/_doc/1

	PUT /twitter/_doc/1
	{
	  "user" : "kimchy",
	  "post_date" : "2019-05-26T19:39:00",
	  "message" : "trying out Elasticsearch"
	}	

            계속  put 하게 되면 "version" : 값이 업데이트 됨
	GET /twitter/_doc/1 조회시 최신 버젼 값을 가진 document 보여줌


4. op_type으로 같은 ID가 있으면 강제 ERROR

	PUT /twitter/_doc/1?op_type=create
	{
	  "user" : "kimchy",
	  "post_date" : "2019-05-27T14:00:00",
	  "message" : "trying out Elasticsearch"
	}


5. document 조회

	GET /twitter/_doc/1

	제일 높은 버젼의 DOC 응답함


6. ID 지정 없이 document 생성

	PUT /twitter/_doc
	{
	  "user" : "kimchy",
	  "post_date" : "2019-05-26T19:39:00",
	  "message" : "trying out Elasticsearch"
	}
     
     	"error": "Incorrect HTTP method for uri [/twitter/_doc?pretty] and method [PUT], allowed:[POST]","status":405
	 --> 해결하기 위해 아래와 같이 실행

	POST /twitter/_doc
	{
	  "user" : "kimchy",
	  "post_date" : "2019-05-26T19:39:00",
	  "message" : "trying out Elasticsearch"
	}
     
	"_id" : "NTX_FWsBh9T9LK9HIAbi" 이런식으로 _id 자동 생성


7. document 조회 "kimchy"

	GET /twitter/_doc/_search?q=kimchy


8. document 변경

	POST /twitter/_doc/1/_update
	{
	  "doc" : {
		   "message" : "learn Elastic Stack"
		  }
	}
  
   
9. document 변경 확인

	GET /twitter/_doc/1


10. 스냅샷 생성

	# repository 생성
	cd elasticsearch-6.7.2
	mkdir backup

	vi config/elasticsearch.yml
	path.repo: ["/home/elas/elasticsearch-6.7.2/backup"]

	./stop.sh
	./start.sh
     
	PUT /_snapshot/my_backup
	{
	  "type": "fs",
	  "settings": {
		  "compress": true,
		  "location": "/home/elas/elasticsearch-6.7.2/backup"
	  }
	}


11. twitter 스냅샷을 실행한다.

	PUT _snapshot/my_backup/111_20190527
	{
	  "indices": "twitter",
	  "ignore_unavailable": true,
	  "include_global_state": false
	}


12. 스냅샷 상황

	GET _snapshot/my_backup/111_20190527/_status

	ls -l backup/
	스냅샷 데이터 생성 확인 


13. twitter document 삭제

	DELETE /twitter/_doc/1


14. twitter document 삭제 확인

	GET /twitter/_doc/1


15. twitter index 삭제
     
	DELETE /twitter


16. index 삭제 확인
     
	GET /twitter


17. 데이터 복원하기

	POST _snapshot/my_backup/111_20190527/_restore
	{
	  "indices": "twitter"
	}


18. index / document 복원 확인

	GET /twitter
	GET /twitter/_doc/1



19. 스냅샷 제거

	DELETE _snapshot/my_backup

	vi config/elasticsearch.yml
	path.repo: ["/home/elas/elasticsearch-6.7.2/backup"]

	./stop.sh
	./start.sh


20. _bulk 단일 기능

	POST _bulk
	{"index":{"_index" : "persons","_id":"1", "_type":"person"}}
	{"name":"John Doe1"}
	{"index":{"_index" : "persons","_id":"2", "_type":"person"}}
	{"name":"Jane Doe2" }

	GET /persons
	GET /persons/person/1


21. _bulk 인덱스, 타입 설정

	POST /lectures/lecture/_bulk
	{ "index" : { "_id" : "1" } }
	{ "title" : "Elasticsearch", "teacher" : "You", "hour" : 8 } 
	{ "index" : {  "_id" : "2" } } 
	{ "title" : "Logstash and beats", "teacher" : "You", "hour" : 4}

	GET /lectures/lecture/1 
	GET /lectures/lecture/2


22. _bulk 복합 설정

	POST /lectures/lecture/_bulk
	{ "delete" : { "_id" : "1" } }
	{ "update" : {  "_id" : "2" } } 
	{ "doc" : {"title":"Elasticsearch, Logstash and beats", "teacher" : "You", "hour" : 12}}

     GET /lectures/lecture/1 : 삭제 
     GET /lectures/lecture/2 : 업데이트


23. 외부 데이터 파일 : 터미널에서 작업

	vi test_file1.txt
	{"index":{}}
	{"title":"logging system with Elastic Stack","teacher":"You","date":"2019-05-19","hour":"16"}

	curl -XPUT 192.168.63.101:9200/lecture/_doc/_bulk?pretty -H 'Content-Type: application/json' --data-binary @test_file1.txt

	* 파일 안에 {"index":{}} 있어야 제대로 업로드 됨.
	* Bulkfile는 binary로 해야 한다. 데이터 옵션을 -d가 아닌 --data-binary로


24. 외부 데이터 파일 + _bulk

	ㅇ 샘플 데이터 
	4.sample-javaBooks.txt
	4.sample-pythonBooks.txt

	curl -XPUT 192.168.63.101:9200/javabooks/_doc/_bulk?pretty -H 'Content-Type: application/json' --data-binary @4.sample-javaBooks.txt
	curl -XPUT 192.168.63.101:9200/pythonbooks/_doc/_bulk?pretty -H 'Content-Type: application/json' --data-binary @4.sample-pythonBooks.txt


25. _bulk로 생성한 인덱스 확인

	GET /javabooks
	GET /pythonbooks
	GET /_cat/indices?v

